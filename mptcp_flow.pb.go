// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: proto/mptcp_flow.proto

package flowmessageenriched

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MPTCPFlowMessage_FlowType int32

const (
	MPTCPFlowMessage_FLOWUNKNOWN MPTCPFlowMessage_FlowType = 0
	MPTCPFlowMessage_SFLOW_5     MPTCPFlowMessage_FlowType = 1
	MPTCPFlowMessage_NETFLOW_V5  MPTCPFlowMessage_FlowType = 2
	MPTCPFlowMessage_NETFLOW_V9  MPTCPFlowMessage_FlowType = 3
	MPTCPFlowMessage_IPFIX       MPTCPFlowMessage_FlowType = 4
)

// Enum value maps for MPTCPFlowMessage_FlowType.
var (
	MPTCPFlowMessage_FlowType_name = map[int32]string{
		0: "FLOWUNKNOWN",
		1: "SFLOW_5",
		2: "NETFLOW_V5",
		3: "NETFLOW_V9",
		4: "IPFIX",
	}
	MPTCPFlowMessage_FlowType_value = map[string]int32{
		"FLOWUNKNOWN": 0,
		"SFLOW_5":     1,
		"NETFLOW_V5":  2,
		"NETFLOW_V9":  3,
		"IPFIX":       4,
	}
)

func (x MPTCPFlowMessage_FlowType) Enum() *MPTCPFlowMessage_FlowType {
	p := new(MPTCPFlowMessage_FlowType)
	*p = x
	return p
}

func (x MPTCPFlowMessage_FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MPTCPFlowMessage_FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_mptcp_flow_proto_enumTypes[0].Descriptor()
}

func (MPTCPFlowMessage_FlowType) Type() protoreflect.EnumType {
	return &file_proto_mptcp_flow_proto_enumTypes[0]
}

func (x MPTCPFlowMessage_FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MPTCPFlowMessage_FlowType.Descriptor instead.
func (MPTCPFlowMessage_FlowType) EnumDescriptor() ([]byte, []int) {
	return file_proto_mptcp_flow_proto_rawDescGZIP(), []int{0, 0}
}

type MPTCPFlowMessage_NormalizedType int32

const (
	MPTCPFlowMessage_No  MPTCPFlowMessage_NormalizedType = 0
	MPTCPFlowMessage_Yes MPTCPFlowMessage_NormalizedType = 1
)

// Enum value maps for MPTCPFlowMessage_NormalizedType.
var (
	MPTCPFlowMessage_NormalizedType_name = map[int32]string{
		0: "No",
		1: "Yes",
	}
	MPTCPFlowMessage_NormalizedType_value = map[string]int32{
		"No":  0,
		"Yes": 1,
	}
)

func (x MPTCPFlowMessage_NormalizedType) Enum() *MPTCPFlowMessage_NormalizedType {
	p := new(MPTCPFlowMessage_NormalizedType)
	*p = x
	return p
}

func (x MPTCPFlowMessage_NormalizedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MPTCPFlowMessage_NormalizedType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_mptcp_flow_proto_enumTypes[1].Descriptor()
}

func (MPTCPFlowMessage_NormalizedType) Type() protoreflect.EnumType {
	return &file_proto_mptcp_flow_proto_enumTypes[1]
}

func (x MPTCPFlowMessage_NormalizedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MPTCPFlowMessage_NormalizedType.Descriptor instead.
func (MPTCPFlowMessage_NormalizedType) EnumDescriptor() ([]byte, []int) {
	return file_proto_mptcp_flow_proto_rawDescGZIP(), []int{0, 1}
}

type MPTCPFlowMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          MPTCPFlowMessage_FlowType `protobuf:"varint,1,opt,name=Type,proto3,enum=flowmessageenriched.MPTCPFlowMessage_FlowType" json:"Type,omitempty"`
	TimeReceived  uint64                    `protobuf:"varint,2,opt,name=TimeReceived,proto3" json:"TimeReceived,omitempty"`
	SequenceNum   uint32                    `protobuf:"varint,4,opt,name=SequenceNum,proto3" json:"SequenceNum,omitempty"`
	SamplingRate  uint64                    `protobuf:"varint,3,opt,name=SamplingRate,proto3" json:"SamplingRate,omitempty"`
	FlowDirection uint32                    `protobuf:"varint,42,opt,name=FlowDirection,proto3" json:"FlowDirection,omitempty"`
	// Sampler information
	SamplerAddress []byte `protobuf:"bytes,11,opt,name=SamplerAddress,proto3" json:"SamplerAddress,omitempty"`
	// Found inside packet
	TimeFlowStart uint64 `protobuf:"varint,38,opt,name=TimeFlowStart,proto3" json:"TimeFlowStart,omitempty"`
	TimeFlowEnd   uint64 `protobuf:"varint,5,opt,name=TimeFlowEnd,proto3" json:"TimeFlowEnd,omitempty"`
	// Size of the sampled packet
	Bytes   uint64 `protobuf:"varint,9,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	Packets uint64 `protobuf:"varint,10,opt,name=Packets,proto3" json:"Packets,omitempty"`
	// Source/destination addresses
	SrcAddr []byte `protobuf:"bytes,6,opt,name=SrcAddr,proto3" json:"SrcAddr,omitempty"`
	DstAddr []byte `protobuf:"bytes,7,opt,name=DstAddr,proto3" json:"DstAddr,omitempty"`
	// Layer 3 protocol (IPv4/IPv6/ARP/MPLS...)
	Etype uint32 `protobuf:"varint,30,opt,name=Etype,proto3" json:"Etype,omitempty"`
	// Layer 4 protocol
	Proto uint32 `protobuf:"varint,20,opt,name=Proto,proto3" json:"Proto,omitempty"`
	// Ports for UDP and TCP
	SrcPort uint32 `protobuf:"varint,21,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort uint32 `protobuf:"varint,22,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	// Interfaces
	InIf  uint32 `protobuf:"varint,18,opt,name=InIf,proto3" json:"InIf,omitempty"`
	OutIf uint32 `protobuf:"varint,19,opt,name=OutIf,proto3" json:"OutIf,omitempty"`
	// Ethernet information
	SrcMac uint64 `protobuf:"varint,27,opt,name=SrcMac,proto3" json:"SrcMac,omitempty"`
	DstMac uint64 `protobuf:"varint,28,opt,name=DstMac,proto3" json:"DstMac,omitempty"`
	// Vlan
	SrcVlan uint32 `protobuf:"varint,33,opt,name=SrcVlan,proto3" json:"SrcVlan,omitempty"`
	DstVlan uint32 `protobuf:"varint,34,opt,name=DstVlan,proto3" json:"DstVlan,omitempty"`
	// 802.1q VLAN in sampled packet
	VlanId uint32 `protobuf:"varint,29,opt,name=VlanId,proto3" json:"VlanId,omitempty"`
	// VRF
	IngressVrfID uint32 `protobuf:"varint,39,opt,name=IngressVrfID,proto3" json:"IngressVrfID,omitempty"`
	EgressVrfID  uint32 `protobuf:"varint,40,opt,name=EgressVrfID,proto3" json:"EgressVrfID,omitempty"`
	// IP and TCP special flags
	IPTos            uint32 `protobuf:"varint,23,opt,name=IPTos,proto3" json:"IPTos,omitempty"`
	ForwardingStatus uint32 `protobuf:"varint,24,opt,name=ForwardingStatus,proto3" json:"ForwardingStatus,omitempty"`
	IPTTL            uint32 `protobuf:"varint,25,opt,name=IPTTL,proto3" json:"IPTTL,omitempty"`
	TCPFlags         uint32 `protobuf:"varint,26,opt,name=TCPFlags,proto3" json:"TCPFlags,omitempty"`
	IcmpType         uint32 `protobuf:"varint,31,opt,name=IcmpType,proto3" json:"IcmpType,omitempty"`
	IcmpCode         uint32 `protobuf:"varint,32,opt,name=IcmpCode,proto3" json:"IcmpCode,omitempty"`
	IPv6FlowLabel    uint32 `protobuf:"varint,37,opt,name=IPv6FlowLabel,proto3" json:"IPv6FlowLabel,omitempty"`
	// Fragments (IPv4/IPv6)
	FragmentId      uint32 `protobuf:"varint,35,opt,name=FragmentId,proto3" json:"FragmentId,omitempty"`
	FragmentOffset  uint32 `protobuf:"varint,36,opt,name=FragmentOffset,proto3" json:"FragmentOffset,omitempty"`
	BiFlowDirection uint32 `protobuf:"varint,41,opt,name=BiFlowDirection,proto3" json:"BiFlowDirection,omitempty"`
	// Autonomous system information
	SrcAS     uint32 `protobuf:"varint,14,opt,name=SrcAS,proto3" json:"SrcAS,omitempty"`
	DstAS     uint32 `protobuf:"varint,15,opt,name=DstAS,proto3" json:"DstAS,omitempty"`
	NextHop   []byte `protobuf:"bytes,12,opt,name=NextHop,proto3" json:"NextHop,omitempty"`
	NextHopAS uint32 `protobuf:"varint,13,opt,name=NextHopAS,proto3" json:"NextHopAS,omitempty"`
	// Prefix size
	SrcNet uint32 `protobuf:"varint,16,opt,name=SrcNet,proto3" json:"SrcNet,omitempty"`
	DstNet uint32 `protobuf:"varint,17,opt,name=DstNet,proto3" json:"DstNet,omitempty"`
	// IP encapsulation information
	HasEncap            bool   `protobuf:"varint,43,opt,name=HasEncap,proto3" json:"HasEncap,omitempty"`
	SrcAddrEncap        []byte `protobuf:"bytes,44,opt,name=SrcAddrEncap,proto3" json:"SrcAddrEncap,omitempty"`
	DstAddrEncap        []byte `protobuf:"bytes,45,opt,name=DstAddrEncap,proto3" json:"DstAddrEncap,omitempty"`
	ProtoEncap          uint32 `protobuf:"varint,46,opt,name=ProtoEncap,proto3" json:"ProtoEncap,omitempty"`
	EtypeEncap          uint32 `protobuf:"varint,47,opt,name=EtypeEncap,proto3" json:"EtypeEncap,omitempty"`
	IPTosEncap          uint32 `protobuf:"varint,48,opt,name=IPTosEncap,proto3" json:"IPTosEncap,omitempty"`
	IPTTLEncap          uint32 `protobuf:"varint,49,opt,name=IPTTLEncap,proto3" json:"IPTTLEncap,omitempty"`
	IPv6FlowLabelEncap  uint32 `protobuf:"varint,50,opt,name=IPv6FlowLabelEncap,proto3" json:"IPv6FlowLabelEncap,omitempty"`
	FragmentIdEncap     uint32 `protobuf:"varint,51,opt,name=FragmentIdEncap,proto3" json:"FragmentIdEncap,omitempty"`
	FragmentOffsetEncap uint32 `protobuf:"varint,52,opt,name=FragmentOffsetEncap,proto3" json:"FragmentOffsetEncap,omitempty"`
	// MPLS information
	HasMPLS       bool   `protobuf:"varint,53,opt,name=HasMPLS,proto3" json:"HasMPLS,omitempty"`
	MPLSCount     uint32 `protobuf:"varint,54,opt,name=MPLSCount,proto3" json:"MPLSCount,omitempty"`
	MPLS1TTL      uint32 `protobuf:"varint,55,opt,name=MPLS1TTL,proto3" json:"MPLS1TTL,omitempty"`           // First TTL
	MPLS1Label    uint32 `protobuf:"varint,56,opt,name=MPLS1Label,proto3" json:"MPLS1Label,omitempty"`       // First Label
	MPLS2TTL      uint32 `protobuf:"varint,57,opt,name=MPLS2TTL,proto3" json:"MPLS2TTL,omitempty"`           // Second TTL
	MPLS2Label    uint32 `protobuf:"varint,58,opt,name=MPLS2Label,proto3" json:"MPLS2Label,omitempty"`       // Second Label
	MPLS3TTL      uint32 `protobuf:"varint,59,opt,name=MPLS3TTL,proto3" json:"MPLS3TTL,omitempty"`           // Third TTL
	MPLS3Label    uint32 `protobuf:"varint,60,opt,name=MPLS3Label,proto3" json:"MPLS3Label,omitempty"`       // Third Label
	MPLSLastTTL   uint32 `protobuf:"varint,61,opt,name=MPLSLastTTL,proto3" json:"MPLSLastTTL,omitempty"`     // Last TTL
	MPLSLastLabel uint32 `protobuf:"varint,62,opt,name=MPLSLastLabel,proto3" json:"MPLSLastLabel,omitempty"` // Last Label
	// PPP information
	HasPPP            bool   `protobuf:"varint,63,opt,name=HasPPP,proto3" json:"HasPPP,omitempty"`
	PPPAddressControl uint32 `protobuf:"varint,64,opt,name=PPPAddressControl,proto3" json:"PPPAddressControl,omitempty"`
	// bwNetFlow enricher fields
	Cid        uint32                          `protobuf:"varint,1000,opt,name=Cid,proto3" json:"Cid,omitempty"`                                                                        // Customer ID - numerical ID, assigned by prefix
	CidString  string                          `protobuf:"bytes,1001,opt,name=CidString,proto3" json:"CidString,omitempty"`                                                             // Customer ID - a more generalized ID, assigned by prefix
	Normalized MPTCPFlowMessage_NormalizedType `protobuf:"varint,1002,opt,name=Normalized,proto3,enum=flowmessageenriched.MPTCPFlowMessage_NormalizedType" json:"Normalized,omitempty"` // Normalization - whether the sampling rate is accounted for
	// Fields for Interface Usability -- enriched using SNMP
	SrcIfName     string `protobuf:"bytes,1003,opt,name=SrcIfName,proto3" json:"SrcIfName,omitempty"`    // set to the name, unset by default
	SrcIfDesc     string `protobuf:"bytes,1004,opt,name=SrcIfDesc,proto3" json:"SrcIfDesc,omitempty"`    // set to the descrition, filtered by a regex in the enricher
	SrcIfSpeed    uint32 `protobuf:"varint,1005,opt,name=SrcIfSpeed,proto3" json:"SrcIfSpeed,omitempty"` // iface speed
	DstIfName     string `protobuf:"bytes,1006,opt,name=DstIfName,proto3" json:"DstIfName,omitempty"`
	DstIfDesc     string `protobuf:"bytes,1007,opt,name=DstIfDesc,proto3" json:"DstIfDesc,omitempty"`
	DstIfSpeed    uint32 `protobuf:"varint,1008,opt,name=DstIfSpeed,proto3" json:"DstIfSpeed,omitempty"`
	ProtoName     string `protobuf:"bytes,1009,opt,name=ProtoName,proto3" json:"ProtoName,omitempty"`         // Protocol Name -- set for some well known protocols, based on Proto
	RemoteCountry string `protobuf:"bytes,1010,opt,name=RemoteCountry,proto3" json:"RemoteCountry,omitempty"` // Geolocation -- set using the provided database
	// Multipath TCP fields
	IsMPTCPFlow               bool   `protobuf:"varint,2001,opt,name=isMPTCPFlow,proto3" json:"isMPTCPFlow,omitempty"`
	NumOfAssociatedSubstreams uint32 `protobuf:"varint,2002,opt,name=numOfAssociatedSubstreams,proto3" json:"numOfAssociatedSubstreams,omitempty"`
}

func (x *MPTCPFlowMessage) Reset() {
	*x = MPTCPFlowMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_mptcp_flow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPTCPFlowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPTCPFlowMessage) ProtoMessage() {}

func (x *MPTCPFlowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mptcp_flow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPTCPFlowMessage.ProtoReflect.Descriptor instead.
func (*MPTCPFlowMessage) Descriptor() ([]byte, []int) {
	return file_proto_mptcp_flow_proto_rawDescGZIP(), []int{0}
}

func (x *MPTCPFlowMessage) GetType() MPTCPFlowMessage_FlowType {
	if x != nil {
		return x.Type
	}
	return MPTCPFlowMessage_FLOWUNKNOWN
}

func (x *MPTCPFlowMessage) GetTimeReceived() uint64 {
	if x != nil {
		return x.TimeReceived
	}
	return 0
}

func (x *MPTCPFlowMessage) GetSequenceNum() uint32 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

func (x *MPTCPFlowMessage) GetSamplingRate() uint64 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

func (x *MPTCPFlowMessage) GetFlowDirection() uint32 {
	if x != nil {
		return x.FlowDirection
	}
	return 0
}

func (x *MPTCPFlowMessage) GetSamplerAddress() []byte {
	if x != nil {
		return x.SamplerAddress
	}
	return nil
}

func (x *MPTCPFlowMessage) GetTimeFlowStart() uint64 {
	if x != nil {
		return x.TimeFlowStart
	}
	return 0
}

func (x *MPTCPFlowMessage) GetTimeFlowEnd() uint64 {
	if x != nil {
		return x.TimeFlowEnd
	}
	return 0
}

func (x *MPTCPFlowMessage) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *MPTCPFlowMessage) GetPackets() uint64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *MPTCPFlowMessage) GetSrcAddr() []byte {
	if x != nil {
		return x.SrcAddr
	}
	return nil
}

func (x *MPTCPFlowMessage) GetDstAddr() []byte {
	if x != nil {
		return x.DstAddr
	}
	return nil
}

func (x *MPTCPFlowMessage) GetEtype() uint32 {
	if x != nil {
		return x.Etype
	}
	return 0
}

func (x *MPTCPFlowMessage) GetProto() uint32 {
	if x != nil {
		return x.Proto
	}
	return 0
}

func (x *MPTCPFlowMessage) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *MPTCPFlowMessage) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *MPTCPFlowMessage) GetInIf() uint32 {
	if x != nil {
		return x.InIf
	}
	return 0
}

func (x *MPTCPFlowMessage) GetOutIf() uint32 {
	if x != nil {
		return x.OutIf
	}
	return 0
}

func (x *MPTCPFlowMessage) GetSrcMac() uint64 {
	if x != nil {
		return x.SrcMac
	}
	return 0
}

func (x *MPTCPFlowMessage) GetDstMac() uint64 {
	if x != nil {
		return x.DstMac
	}
	return 0
}

func (x *MPTCPFlowMessage) GetSrcVlan() uint32 {
	if x != nil {
		return x.SrcVlan
	}
	return 0
}

func (x *MPTCPFlowMessage) GetDstVlan() uint32 {
	if x != nil {
		return x.DstVlan
	}
	return 0
}

func (x *MPTCPFlowMessage) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *MPTCPFlowMessage) GetIngressVrfID() uint32 {
	if x != nil {
		return x.IngressVrfID
	}
	return 0
}

func (x *MPTCPFlowMessage) GetEgressVrfID() uint32 {
	if x != nil {
		return x.EgressVrfID
	}
	return 0
}

func (x *MPTCPFlowMessage) GetIPTos() uint32 {
	if x != nil {
		return x.IPTos
	}
	return 0
}

func (x *MPTCPFlowMessage) GetForwardingStatus() uint32 {
	if x != nil {
		return x.ForwardingStatus
	}
	return 0
}

func (x *MPTCPFlowMessage) GetIPTTL() uint32 {
	if x != nil {
		return x.IPTTL
	}
	return 0
}

func (x *MPTCPFlowMessage) GetTCPFlags() uint32 {
	if x != nil {
		return x.TCPFlags
	}
	return 0
}

func (x *MPTCPFlowMessage) GetIcmpType() uint32 {
	if x != nil {
		return x.IcmpType
	}
	return 0
}

func (x *MPTCPFlowMessage) GetIcmpCode() uint32 {
	if x != nil {
		return x.IcmpCode
	}
	return 0
}

func (x *MPTCPFlowMessage) GetIPv6FlowLabel() uint32 {
	if x != nil {
		return x.IPv6FlowLabel
	}
	return 0
}

func (x *MPTCPFlowMessage) GetFragmentId() uint32 {
	if x != nil {
		return x.FragmentId
	}
	return 0
}

func (x *MPTCPFlowMessage) GetFragmentOffset() uint32 {
	if x != nil {
		return x.FragmentOffset
	}
	return 0
}

func (x *MPTCPFlowMessage) GetBiFlowDirection() uint32 {
	if x != nil {
		return x.BiFlowDirection
	}
	return 0
}

func (x *MPTCPFlowMessage) GetSrcAS() uint32 {
	if x != nil {
		return x.SrcAS
	}
	return 0
}

func (x *MPTCPFlowMessage) GetDstAS() uint32 {
	if x != nil {
		return x.DstAS
	}
	return 0
}

func (x *MPTCPFlowMessage) GetNextHop() []byte {
	if x != nil {
		return x.NextHop
	}
	return nil
}

func (x *MPTCPFlowMessage) GetNextHopAS() uint32 {
	if x != nil {
		return x.NextHopAS
	}
	return 0
}

func (x *MPTCPFlowMessage) GetSrcNet() uint32 {
	if x != nil {
		return x.SrcNet
	}
	return 0
}

func (x *MPTCPFlowMessage) GetDstNet() uint32 {
	if x != nil {
		return x.DstNet
	}
	return 0
}

func (x *MPTCPFlowMessage) GetHasEncap() bool {
	if x != nil {
		return x.HasEncap
	}
	return false
}

func (x *MPTCPFlowMessage) GetSrcAddrEncap() []byte {
	if x != nil {
		return x.SrcAddrEncap
	}
	return nil
}

func (x *MPTCPFlowMessage) GetDstAddrEncap() []byte {
	if x != nil {
		return x.DstAddrEncap
	}
	return nil
}

func (x *MPTCPFlowMessage) GetProtoEncap() uint32 {
	if x != nil {
		return x.ProtoEncap
	}
	return 0
}

func (x *MPTCPFlowMessage) GetEtypeEncap() uint32 {
	if x != nil {
		return x.EtypeEncap
	}
	return 0
}

func (x *MPTCPFlowMessage) GetIPTosEncap() uint32 {
	if x != nil {
		return x.IPTosEncap
	}
	return 0
}

func (x *MPTCPFlowMessage) GetIPTTLEncap() uint32 {
	if x != nil {
		return x.IPTTLEncap
	}
	return 0
}

func (x *MPTCPFlowMessage) GetIPv6FlowLabelEncap() uint32 {
	if x != nil {
		return x.IPv6FlowLabelEncap
	}
	return 0
}

func (x *MPTCPFlowMessage) GetFragmentIdEncap() uint32 {
	if x != nil {
		return x.FragmentIdEncap
	}
	return 0
}

func (x *MPTCPFlowMessage) GetFragmentOffsetEncap() uint32 {
	if x != nil {
		return x.FragmentOffsetEncap
	}
	return 0
}

func (x *MPTCPFlowMessage) GetHasMPLS() bool {
	if x != nil {
		return x.HasMPLS
	}
	return false
}

func (x *MPTCPFlowMessage) GetMPLSCount() uint32 {
	if x != nil {
		return x.MPLSCount
	}
	return 0
}

func (x *MPTCPFlowMessage) GetMPLS1TTL() uint32 {
	if x != nil {
		return x.MPLS1TTL
	}
	return 0
}

func (x *MPTCPFlowMessage) GetMPLS1Label() uint32 {
	if x != nil {
		return x.MPLS1Label
	}
	return 0
}

func (x *MPTCPFlowMessage) GetMPLS2TTL() uint32 {
	if x != nil {
		return x.MPLS2TTL
	}
	return 0
}

func (x *MPTCPFlowMessage) GetMPLS2Label() uint32 {
	if x != nil {
		return x.MPLS2Label
	}
	return 0
}

func (x *MPTCPFlowMessage) GetMPLS3TTL() uint32 {
	if x != nil {
		return x.MPLS3TTL
	}
	return 0
}

func (x *MPTCPFlowMessage) GetMPLS3Label() uint32 {
	if x != nil {
		return x.MPLS3Label
	}
	return 0
}

func (x *MPTCPFlowMessage) GetMPLSLastTTL() uint32 {
	if x != nil {
		return x.MPLSLastTTL
	}
	return 0
}

func (x *MPTCPFlowMessage) GetMPLSLastLabel() uint32 {
	if x != nil {
		return x.MPLSLastLabel
	}
	return 0
}

func (x *MPTCPFlowMessage) GetHasPPP() bool {
	if x != nil {
		return x.HasPPP
	}
	return false
}

func (x *MPTCPFlowMessage) GetPPPAddressControl() uint32 {
	if x != nil {
		return x.PPPAddressControl
	}
	return 0
}

func (x *MPTCPFlowMessage) GetCid() uint32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *MPTCPFlowMessage) GetCidString() string {
	if x != nil {
		return x.CidString
	}
	return ""
}

func (x *MPTCPFlowMessage) GetNormalized() MPTCPFlowMessage_NormalizedType {
	if x != nil {
		return x.Normalized
	}
	return MPTCPFlowMessage_No
}

func (x *MPTCPFlowMessage) GetSrcIfName() string {
	if x != nil {
		return x.SrcIfName
	}
	return ""
}

func (x *MPTCPFlowMessage) GetSrcIfDesc() string {
	if x != nil {
		return x.SrcIfDesc
	}
	return ""
}

func (x *MPTCPFlowMessage) GetSrcIfSpeed() uint32 {
	if x != nil {
		return x.SrcIfSpeed
	}
	return 0
}

func (x *MPTCPFlowMessage) GetDstIfName() string {
	if x != nil {
		return x.DstIfName
	}
	return ""
}

func (x *MPTCPFlowMessage) GetDstIfDesc() string {
	if x != nil {
		return x.DstIfDesc
	}
	return ""
}

func (x *MPTCPFlowMessage) GetDstIfSpeed() uint32 {
	if x != nil {
		return x.DstIfSpeed
	}
	return 0
}

func (x *MPTCPFlowMessage) GetProtoName() string {
	if x != nil {
		return x.ProtoName
	}
	return ""
}

func (x *MPTCPFlowMessage) GetRemoteCountry() string {
	if x != nil {
		return x.RemoteCountry
	}
	return ""
}

func (x *MPTCPFlowMessage) GetIsMPTCPFlow() bool {
	if x != nil {
		return x.IsMPTCPFlow
	}
	return false
}

func (x *MPTCPFlowMessage) GetNumOfAssociatedSubstreams() uint32 {
	if x != nil {
		return x.NumOfAssociatedSubstreams
	}
	return 0
}

var File_proto_mptcp_flow_proto protoreflect.FileDescriptor

var file_proto_mptcp_flow_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x70, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x22, 0xaf, 0x14,
	0x0a, 0x10, 0x4d, 0x50, 0x54, 0x43, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x2e, 0x4d, 0x50, 0x54, 0x43, 0x50, 0x46, 0x6c, 0x6f, 0x77,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e,
	0x49, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x49, 0x66, 0x12, 0x14,
	0x0a, 0x05, 0x4f, 0x75, 0x74, 0x49, 0x66, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4f,
	0x75, 0x74, 0x49, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x53, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x44, 0x73,
	0x74, 0x4d, 0x61, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x72, 0x63, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x44, 0x73, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x44, 0x73, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x72, 0x66, 0x49, 0x44,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56,
	0x72, 0x66, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x72,
	0x66, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x45, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x56, 0x72, 0x66, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x50, 0x54, 0x6f, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x50, 0x54, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x50, 0x54, 0x54,
	0x4c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x50, 0x54, 0x54, 0x4c, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x43, 0x50, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x54, 0x43, 0x50, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63,
	0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x63,
	0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x50, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49, 0x50, 0x76, 0x36, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x42, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x42, 0x69, 0x46, 0x6c, 0x6f,
	0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x72,
	0x63, 0x41, 0x53, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x72, 0x63, 0x41, 0x53,
	0x12, 0x14, 0x0a, 0x05, 0x44, 0x73, 0x74, 0x41, 0x53, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x44, 0x73, 0x74, 0x41, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x53, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x53, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x72, 0x63, 0x4e, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x53, 0x72, 0x63, 0x4e, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x73, 0x74, 0x4e, 0x65, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x44, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x48, 0x61, 0x73, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x48, 0x61, 0x73, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x72,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x74, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x74, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x50, 0x54, 0x6f, 0x73, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x50, 0x54, 0x6f, 0x73, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x50, 0x54, 0x54, 0x4c, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x50, 0x54, 0x54, 0x4c, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x50, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x49, 0x50, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x45, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x46, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x13,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x48, 0x61, 0x73, 0x4d, 0x50, 0x4c, 0x53, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x48, 0x61, 0x73, 0x4d, 0x50, 0x4c, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x50, 0x4c, 0x53,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4d, 0x50, 0x4c,
	0x53, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x50, 0x4c, 0x53, 0x31, 0x54,
	0x54, 0x4c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4d, 0x50, 0x4c, 0x53, 0x31, 0x54,
	0x54, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x50, 0x4c, 0x53, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4d, 0x50, 0x4c, 0x53, 0x31, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x50, 0x4c, 0x53, 0x32, 0x54, 0x54, 0x4c, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4d, 0x50, 0x4c, 0x53, 0x32, 0x54, 0x54, 0x4c, 0x12, 0x1e,
	0x0a, 0x0a, 0x4d, 0x50, 0x4c, 0x53, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x4d, 0x50, 0x4c, 0x53, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x50, 0x4c, 0x53, 0x33, 0x54, 0x54, 0x4c, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x4d, 0x50, 0x4c, 0x53, 0x33, 0x54, 0x54, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x50,
	0x4c, 0x53, 0x33, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x4d, 0x50, 0x4c, 0x53, 0x33, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x50,
	0x4c, 0x53, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x54, 0x4c, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x54, 0x4c, 0x12, 0x24, 0x0a, 0x0d,
	0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4d, 0x50, 0x4c, 0x53, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x73, 0x50, 0x50, 0x50, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x48, 0x61, 0x73, 0x50, 0x50, 0x50, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x50,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x50, 0x50, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x11, 0x0a, 0x03, 0x43, 0x69, 0x64, 0x18,
	0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x43, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x43,
	0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x0a, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x65, 0x64, 0x2e, 0x4d, 0x50, 0x54, 0x43, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x72, 0x63, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xeb,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x72, 0x63, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x53, 0x72, 0x63, 0x49, 0x66, 0x44, 0x65, 0x73, 0x63, 0x18, 0xec, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x72, 0x63, 0x49, 0x66, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1f, 0x0a, 0x0a, 0x53, 0x72, 0x63, 0x49, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0xed, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x72, 0x63, 0x49, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x09, 0x44, 0x73, 0x74, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xee, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x73, 0x74, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x09, 0x44, 0x73, 0x74, 0x49, 0x66, 0x44, 0x65, 0x73, 0x63, 0x18, 0xef, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x73, 0x74, 0x49, 0x66, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f,
	0x0a, 0x0a, 0x44, 0x73, 0x74, 0x49, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0xf0, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x44, 0x73, 0x74, 0x49, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xf1, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0xf2, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x73, 0x4d, 0x50, 0x54, 0x43, 0x50,
	0x46, 0x6c, 0x6f, 0x77, 0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d,
	0x50, 0x54, 0x43, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x4f,
	0x66, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0xd2, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75,
	0x6d, 0x4f, 0x66, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x53, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4c, 0x4f, 0x57, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x35, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x54, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x56, 0x35, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x54, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x56, 0x39, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x50, 0x46, 0x49, 0x58, 0x10, 0x04, 0x22, 0x21, 0x0a, 0x0e,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06,
	0x0a, 0x02, 0x4e, 0x6f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x65, 0x73, 0x10, 0x01, 0x42,
	0x27, 0x0a, 0x09, 0x62, 0x77, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x1a, 0x4d, 0x50,
	0x54, 0x43, 0x50, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x50, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_mptcp_flow_proto_rawDescOnce sync.Once
	file_proto_mptcp_flow_proto_rawDescData = file_proto_mptcp_flow_proto_rawDesc
)

func file_proto_mptcp_flow_proto_rawDescGZIP() []byte {
	file_proto_mptcp_flow_proto_rawDescOnce.Do(func() {
		file_proto_mptcp_flow_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_mptcp_flow_proto_rawDescData)
	})
	return file_proto_mptcp_flow_proto_rawDescData
}

var file_proto_mptcp_flow_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_mptcp_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_mptcp_flow_proto_goTypes = []interface{}{
	(MPTCPFlowMessage_FlowType)(0),       // 0: flowmessageenriched.MPTCPFlowMessage.FlowType
	(MPTCPFlowMessage_NormalizedType)(0), // 1: flowmessageenriched.MPTCPFlowMessage.NormalizedType
	(*MPTCPFlowMessage)(nil),             // 2: flowmessageenriched.MPTCPFlowMessage
}
var file_proto_mptcp_flow_proto_depIdxs = []int32{
	0, // 0: flowmessageenriched.MPTCPFlowMessage.Type:type_name -> flowmessageenriched.MPTCPFlowMessage.FlowType
	1, // 1: flowmessageenriched.MPTCPFlowMessage.Normalized:type_name -> flowmessageenriched.MPTCPFlowMessage.NormalizedType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_mptcp_flow_proto_init() }
func file_proto_mptcp_flow_proto_init() {
	if File_proto_mptcp_flow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_mptcp_flow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPTCPFlowMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_mptcp_flow_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_mptcp_flow_proto_goTypes,
		DependencyIndexes: file_proto_mptcp_flow_proto_depIdxs,
		EnumInfos:         file_proto_mptcp_flow_proto_enumTypes,
		MessageInfos:      file_proto_mptcp_flow_proto_msgTypes,
	}.Build()
	File_proto_mptcp_flow_proto = out.File
	file_proto_mptcp_flow_proto_rawDesc = nil
	file_proto_mptcp_flow_proto_goTypes = nil
	file_proto_mptcp_flow_proto_depIdxs = nil
}
